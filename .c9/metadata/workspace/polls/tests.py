{"filter":false,"title":"tests.py","tooltip":"/polls/tests.py","undoManager":{"mark":72,"position":72,"stack":[[{"group":"doc","deltas":[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":0},"end":{"row":19,"column":0},"action":"insert","lines":["import datetime","","from django.utils import timezone","from django.test import TestCase","","from polls.models import Question","","class QuestionMethodTests(TestCase):","","    def test_was_published_recently_with_future_question(self):","        \"\"\"","        was_published_recently() should return False for questions whose","        pub_date is in the future","        \"\"\"","        time = timezone.now() + datetime.timedelta(days=30)","        future_question = Question(pub_date=time)","        self.assertEqual(future_question.was_published_recently(), False)",""]}]}],[{"group":"doc","deltas":[{"start":{"row":18,"column":8},"end":{"row":19,"column":0},"action":"insert","lines":["",""]},{"start":{"row":19,"column":0},"end":{"row":19,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":4},"end":{"row":19,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":0},"end":{"row":19,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":59},"end":{"row":19,"column":64},"action":"remove","lines":["False"]},{"start":{"row":19,"column":59},"end":{"row":19,"column":60},"action":"insert","lines":["T"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":60},"end":{"row":19,"column":61},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":61},"end":{"row":19,"column":62},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":61},"end":{"row":19,"column":62},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":60},"end":{"row":19,"column":61},"action":"remove","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":60},"end":{"row":19,"column":61},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":61},"end":{"row":19,"column":62},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":62},"end":{"row":19,"column":63},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":62},"end":{"row":19,"column":63},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":61},"end":{"row":19,"column":62},"action":"remove","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":60},"end":{"row":19,"column":61},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":59},"end":{"row":19,"column":60},"action":"remove","lines":["T"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":59},"end":{"row":19,"column":60},"action":"insert","lines":["F"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":60},"end":{"row":19,"column":61},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":61},"end":{"row":19,"column":62},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":62},"end":{"row":19,"column":63},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":63},"end":{"row":19,"column":64},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":63},"end":{"row":19,"column":64},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":62},"end":{"row":19,"column":63},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":61},"end":{"row":19,"column":62},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":60},"end":{"row":19,"column":61},"action":"remove","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":60},"end":{"row":19,"column":61},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":61},"end":{"row":19,"column":62},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":62},"end":{"row":19,"column":63},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":63},"end":{"row":19,"column":64},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":64},"end":{"row":19,"column":65},"action":"insert","lines":["w"]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":64},"end":{"row":19,"column":65},"action":"remove","lines":["w"]}]}],[{"group":"doc","deltas":[{"start":{"row":8,"column":0},"end":{"row":19,"column":65},"action":"remove","lines":["","class QuestionMethodTests(TestCase):","","    def test_was_published_recently_with_future_question(self):","        \"\"\"","        was_published_recently() should return False for questions whose","        pub_date is in the future","        \"\"\"","        time = timezone.now() + datetime.timedelta(days=30)","        future_question = Question(pub_date=time)","        ","self.assertEqual(future_question.was_published_recently(), False)"]},{"start":{"row":8,"column":0},"end":{"row":24,"column":73},"action":"insert","lines":["import datetime","","from django.utils import timezone","from django.test import TestCase","","from polls.models import Question","","class QuestionMethodTests(TestCase):","","    def test_was_published_recently_with_future_question(self):","        \"\"\"","        was_published_recently() should return False for questions whose","        pub_date is in the future","        \"\"\"","        time = timezone.now() + datetime.timedelta(days=30)","        future_question = Question(pub_date=time)","        self.assertEqual(future_question.was_published_recently(), False)"]}]}],[{"group":"doc","deltas":[{"start":{"row":26,"column":0},"end":{"row":27,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":27,"column":0},"end":{"row":43,"column":68},"action":"insert","lines":["def test_was_published_recently_with_old_question(self):","    \"\"\"","    was_published_recently() should return False for questions whose","    pub_date is older than 1 day","    \"\"\"","    time = timezone.now() - datetime.timedelta(days=30)","    old_question = Question(pub_date=time)","    self.assertEqual(old_question.was_published_recently(), False)","","def test_was_published_recently_with_recent_question(self):","    \"\"\"","    was_published_recently() should return True for questions whose","    pub_date is within the last day","    \"\"\"","    time = timezone.now() - datetime.timedelta(hours=1)","    recent_question = Question(pub_date=time)","    self.assertEqual(recent_question.was_published_recently(), True)"]}]}],[{"group":"doc","deltas":[{"start":{"row":24,"column":4},"end":{"row":24,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":24,"column":4},"end":{"row":24,"column":8},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":24,"column":4},"end":{"row":24,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":24,"column":4},"end":{"row":24,"column":8},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":17,"column":4},"end":{"row":24,"column":73},"action":"remove","lines":["def test_was_published_recently_with_future_question(self):","        \"\"\"","        was_published_recently() should return False for questions whose","        pub_date is in the future","        \"\"\"","        time = timezone.now() + datetime.timedelta(days=30)","        future_question = Question(pub_date=time)","        self.assertEqual(future_question.was_published_recently(), False)"]}]}],[{"group":"doc","deltas":[{"start":{"row":17,"column":0},"end":{"row":17,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":16,"column":0},"end":{"row":17,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":36},"end":{"row":16,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":18,"column":0},"end":{"row":18,"column":4},"action":"insert","lines":["    "]},{"start":{"row":19,"column":0},"end":{"row":19,"column":4},"action":"insert","lines":["    "]},{"start":{"row":20,"column":0},"end":{"row":20,"column":4},"action":"insert","lines":["    "]},{"start":{"row":21,"column":0},"end":{"row":21,"column":4},"action":"insert","lines":["    "]},{"start":{"row":22,"column":0},"end":{"row":22,"column":4},"action":"insert","lines":["    "]},{"start":{"row":23,"column":0},"end":{"row":23,"column":4},"action":"insert","lines":["    "]},{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"insert","lines":["    "]},{"start":{"row":25,"column":0},"end":{"row":25,"column":4},"action":"insert","lines":["    "]},{"start":{"row":26,"column":0},"end":{"row":26,"column":4},"action":"insert","lines":["    "]},{"start":{"row":27,"column":0},"end":{"row":27,"column":4},"action":"insert","lines":["    "]},{"start":{"row":28,"column":0},"end":{"row":28,"column":4},"action":"insert","lines":["    "]},{"start":{"row":29,"column":0},"end":{"row":29,"column":4},"action":"insert","lines":["    "]},{"start":{"row":30,"column":0},"end":{"row":30,"column":4},"action":"insert","lines":["    "]},{"start":{"row":31,"column":0},"end":{"row":31,"column":4},"action":"insert","lines":["    "]},{"start":{"row":32,"column":0},"end":{"row":32,"column":4},"action":"insert","lines":["    "]},{"start":{"row":33,"column":0},"end":{"row":33,"column":4},"action":"insert","lines":["    "]},{"start":{"row":34,"column":0},"end":{"row":34,"column":4},"action":"insert","lines":["    "]},{"start":{"row":35,"column":0},"end":{"row":35,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":13,"column":33},"end":{"row":14,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":14,"column":0},"end":{"row":15,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":0},"end":{"row":15,"column":44},"action":"insert","lines":["from django.core.urlresolvers import reverse"]}]}],[{"group":"doc","deltas":[{"start":{"row":38,"column":0},"end":{"row":46,"column":49},"action":"insert","lines":["def create_question(question_text, days):","    \"\"\"","    Creates a question with the given `question_text` published the given","    number of `days` offset to now (negative for questions published","    in the past, positive for questions that have yet to be published).","    \"\"\"","    time = timezone.now() + datetime.timedelta(days=days)","    return Question.objects.create(question_text=question_text,","                                   pub_date=time)"]}]}],[{"group":"doc","deltas":[{"start":{"row":46,"column":49},"end":{"row":47,"column":0},"action":"insert","lines":["",""]},{"start":{"row":47,"column":0},"end":{"row":47,"column":35},"action":"insert","lines":["                                   "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":34},"end":{"row":47,"column":35},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":33},"end":{"row":47,"column":34},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":32},"end":{"row":47,"column":33},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":28},"end":{"row":47,"column":32},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":24},"end":{"row":47,"column":28},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":20},"end":{"row":47,"column":24},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":16},"end":{"row":47,"column":20},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":12},"end":{"row":47,"column":16},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":8},"end":{"row":47,"column":12},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":4},"end":{"row":47,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":0},"end":{"row":47,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":0},"end":{"row":48,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":48,"column":0},"end":{"row":104,"column":9},"action":"insert","lines":["class QuestionViewTests(TestCase):","    def test_index_view_with_no_questions(self):","        \"\"\"","        If no questions exist, an appropriate message should be displayed.","        \"\"\"","        response = self.client.get(reverse('polls:index'))","        self.assertEqual(response.status_code, 200)","        self.assertContains(response, \"No polls are available.\")","        self.assertQuerysetEqual(response.context['latest_question_list'], [])","","    def test_index_view_with_a_past_question(self):","        \"\"\"","        Questions with a pub_date in the past should be displayed on the","        index page","        \"\"\"","        create_question(question_text=\"Past question.\", days=-30)","        response = self.client.get(reverse('polls:index'))","        self.assertQuerysetEqual(","            response.context['latest_question_list'],","            ['<Question: Past question.>']","        )","","    def test_index_view_with_a_future_question(self):","        \"\"\"","        Questions with a pub_date in the future should not be displayed on","        the index page.","        \"\"\"","        create_question(question_text=\"Future question.\", days=30)","        response = self.client.get(reverse('polls:index'))","        self.assertContains(response, \"No polls are available.\",","                            status_code=200)","        self.assertQuerysetEqual(response.context['latest_question_list'], [])","","    def test_index_view_with_future_question_and_past_question(self):","        \"\"\"","        Even if both past and future questions exist, only past questions","        should be displayed.","        \"\"\"","        create_question(question_text=\"Past question.\", days=-30)","        create_question(question_text=\"Future question.\", days=30)","        response = self.client.get(reverse('polls:index'))","        self.assertQuerysetEqual(","            response.context['latest_question_list'],","            ['<Question: Past question.>']","        )","","    def test_index_view_with_two_past_questions(self):","        \"\"\"","        The questions index page may display multiple questions.","        \"\"\"","        create_question(question_text=\"Past question 1.\", days=-30)","        create_question(question_text=\"Past question 2.\", days=-5)","        response = self.client.get(reverse('polls:index'))","        self.assertQuerysetEqual(","            response.context['latest_question_list'],","            ['<Question: Past question 2.>', '<Question: Past question 1.>']","        )"]}]}],[{"group":"doc","deltas":[{"start":{"row":104,"column":9},"end":{"row":105,"column":0},"action":"insert","lines":["",""]},{"start":{"row":105,"column":0},"end":{"row":105,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":94,"column":0},"end":{"row":94,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":105,"column":8},"end":{"row":106,"column":0},"action":"insert","lines":["",""]},{"start":{"row":106,"column":0},"end":{"row":106,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":4},"end":{"row":106,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":0},"end":{"row":106,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":0},"end":{"row":128,"column":44},"action":"insert","lines":["class QuestionIndexDetailTests(TestCase):","    def test_detail_view_with_a_future_question(self):","        \"\"\"","        The detail view of a question with a pub_date in the future should","        return a 404 not found.","        \"\"\"","        future_question = create_question(question_text='Future question.',","                                          days=5)","        response = self.client.get(reverse('polls:detail',","                                   args=(future_question.id,)))","        self.assertEqual(response.status_code, 404)","","    def test_detail_view_with_a_past_question(self):","        \"\"\"","        The detail view of a question with a pub_date in the past should","        display the question's text.","        \"\"\"","        past_question = create_question(question_text='Past Question.',","                                        days=-5)","        response = self.client.get(reverse('polls:detail',","                                   args=(past_question.id,)))","        self.assertContains(response, past_question.question_text,","                            status_code=200)"]}]}]]},"ace":{"folds":[],"scrolltop":231,"scrollleft":0,"selection":{"start":{"row":128,"column":44},"end":{"row":128,"column":44},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":16,"state":"start","mode":"ace/mode/python"}},"timestamp":1425755823920,"hash":"488d8c103a0e15b1a9818e5e7928c970b62da582"}